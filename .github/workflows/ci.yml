name: Test

on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main

jobs:
  lint:
    strategy:
      matrix:
        go-version: [1.21.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  # test:
  #   strategy:
  #     matrix:
  #       go-version: [1.21.x]
  #       os: [ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   timeout-minutes: 80
  #   steps:

  #     - name: Install Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: ${{ matrix.go-version }}

  #     - name: Install Go dependencies
  #       run: |
  #         go mod download

  #     - name: Run tests
  #       run: |
  #         go-acc -o coverage.txt --ignore generated,cmd,graph  ./... -- -timeout 60m
  #         grep -v "generated.go" coverage.txt | grep -v "_gen.go" | grep -v "_mock.go" | grep -v "*mock.go" | grep -v "mocks.go" | grep -v "*resolver*go" | grep -v "server.go" | grep -v "*.html" > coverage.out
  #         go tool cover -html=coverage.out -o coverage.html
  #         gocov convert coverage.out > coverage.json
  #         gocov report coverage.json > coverage_report.txt
  #         tail coverage_report.txt

  #     - name: Install goveralls
  #       env:
  #         GO111MODULE: off
  #       run: go get github.com/mattn/goveralls
  #     - name: Send coverage
  #       env:
  #         COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: goveralls -coverprofile=coverage.out  -service=github
  #     - name: Quality Gate - Test coverage shall be above threshold
  #       env:
  #         TESTCOVERAGE_THRESHOLD: 0.0
  #       run: |
  #           echo "Quality Gate: checking if test coverage is above threshold ..."
  #           echo "Threshold             : ${TESTCOVERAGE_THRESHOLD} %"
  #           totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
  #           echo "Current test coverage : $totalCoverage %"
  #           if (( $(echo "$totalCoverage ${TESTCOVERAGE_THRESHOLD}" | awk '{print ($1 >= $2)}') )); then
  #               echo "OK"
  #           else
  #               echo "Current test coverage is below threshold. Please add more tests"
  #               echo "Failed"
  #               exit 1
  #           fi
